1. 데이터베이스의 시초__
- 1960년부터 file의 한계를 극복하기 위한 시도가 본격적으로 시작됨
- 거대기업과 엔지니어들이 누구나 쉽게 데이터를 정리정돈할 수 있는 전문적인 소프트웨어 고안하고자 함
- 1970년 에드거 F. 테드는 IBM에서 일하는 동안 데이터베이스 관리를 위한 관계형 모델을 만듬
- 테드의 이론에 기반해서 여러가지 관계형 데이터베이스 등장

Web + MySQL 동반성장
관계형 데이터베이스를 이용하면 데이터를 표의 형태로 정리정돈할 수 있고 정렬 검색과 같은 작업을 빠르고 편리하고 안전하게 할 수 있음



2. 데이터베이스의 목적
스프레드시트 / 데이터베이스의 공통점

데이터를 표로 표현해준다
스프레드시트 / 데이터베이스의 차이점

스프레드시트 : 마우스클릭을 통해 데이터 제어
데이터베이스 : sql이라고 하는 컴퓨터 언어를 이용해서 데이터 제어



3. MySQL 설치
추천검색어 : mysql community edition download

MySQL Server 다운로드

학습에 필요한 MySQL Server만 다운로드
Download MySQL Community Edition » 클릭
MySQL Community Server 클릭
MySQL 통합 다운로드

또는 workbench를 포함한 전체 한번에 설치 (설치방법 참조)
설치 중 "No compatible server were found. You'll need to cancel this wizard and install one" 에러 메세지가 뜸
설치방법 참조링크에 따라 윈도우 포맷하면서 없어진 Visual Studio 를 다시 설치하니 해결됨


다운로드 후 사용법

터미널에서 cd /usr/local/mysql/bin/ 이동 및 MySQL 실행./mysql -uroot -p
mysql>과 같은 프롬프트가 표시되고 있어야 정상적으로 작동하는 것 　　　




4. MySQL의 구조
3가지 구성요소: 표 > 스키마(데이터베이스) > 데이터베이스 서버

표 : 데이터를 기록하는 최종적인 곳
스키마 : 표들을 서로 그룹핑할 때 사용하는 일종의 폴더, 서로 연관된 표의 모음
데이터베이스 서버 : 스키마를 저장 　




5. MySQL 서버 접속
데이터 베이스의 효용

자체적인 보안체계로 안전하게 데이터 보관
자체적인 권한기능으로 여러 사용자의 권한을 차등적으로 구분
MySQL 실행 ./mysql -uroot -p

u옵션 : user 사용자 입력
p옵션 : password 비밀번호 입력 (바로 입력하면 비밀번호가 노출되니까 저기까지만 입력하고 엔터)



6. MySQL 스키마(schema)의 사용
추천검색어 : mysql create database / how to show database list in mysql

데이터베이스 생성

mysql> CREATE DATABASE nameofdatabase;
이미 같은 이름의 데이터베이스가 있을 경우 다음과 같은 에러발생
ERROR 1007 (HY000): Can't create databbase 'nameofdatabase'; database exists
데이터베이스 삭제

mysql> DROP DATABASE nameofdatabase;
데이터베이스 조회

mysql> SHOW DATBASES;
데이터베이스 선택

mysql> USE nameofdatabase;
Query OK 가 뜨면 잘 되었다는 뜻



7. SQL과 테이블 구조
SQL의 뜻
Structured 표로 정리되어 구조화 되어있다
Query 데이터베이스에게 '데이터를 넣어줘, 삭제해줘, 수정해줘, 읽어줘' 요청한다
Language 데이터베이스도 이해할 수 있고 사용자도 이해할 수 있는 언어로 요청한다
SQL의 특징
쉽다 : html과 함께 쉬운 언어로 꼽음
중요하다: 관계형 데이터베이스에 쓰이는 표준화된 언어
표(table) 와 관련된 용어
수직, column, 열 : 데이터의타입
수평 row, record 행 : 데이터 하나하나



8. MySQL 테이블의 생성
추천검색어 : create table in mysql cheat sheet / mysql datatype number

MySQL 테이블 생성

mysql> CREATE TABLE nameoftable(<br>id INT(11) NOT NULL AUTO_INCREMENT,
title  , description, ;
id INT(11) NOT NULL AUTO_INCREMENT,
title VARCHAR(100) NOT NULL,
description TEXT NULL,
created DATETIME NOT NULL,
author VARCHAR(30) NULL,
profile VARCHAR(100) NULL,
PRIMARY KEY(id));
datatype(length): length는 데이터를 얼마까지 보여줄지 정함
NOT NULL: 항상 값이 있어야 함
NULL: 값이 없어도 됨
AUTO_INCREMENT: id 값 자동 1씩 증가(값이 중복되는 것 방지할 수 있음)
PRIMARY KEY(): 테이블의 어떤 컬럼이 메인 키인지 정함
MySQL 기본 비밀번호를 쓰는 경우 발생하는 에러

ERROR 1820 (HY000): You must reset your password using ALTERUSER statement before executing this statement
mysql> SET PASSWORD = PASSWORD('1234');
mysql> exit
./mysql -uroot -p 새로운 비밀번호 입력



9. MySQL의 CRUD
데이터베이스의 본질: CRUD

항상 사용하는 기능: Create Read
없을수도 있는 기능: Update, Delete



10. SQL의 INSERT 구문
추천검색어: mysql create row
mysql> DESC nameoftable 참조해서 작성
mysql> INSERT INTO topic (title,description,created,author,profile) VALUES('MySQL','MySQL is ...',NOW(),'egoing','developer');
PRIMARY KEY는 안적으면 알아서 1씩 증가함
NOW(): 현재시간



11. SQL의 SELECT 구문
추천검색어: how to read row in mysql / mysql select syntax
mysql> SELECT * FROM nameoftable;
mysql> SELECT id, title,created,author FROM topic WHERE author='egoing' ORDER BY id DESC LIMIT 2;
WHERE author='egoing': 특정 값을 갖는 경우만 읽기
ORDER BY id DESC : 오름차/내림차 순으로 읽기
LIMIT 2 : 최대 2개만 보여주기



12. SQL의 UPDATE 구문
추천검색어: mysql update
mysql> UPDATE nameoftable SET description='newcontents...', title='Oracle' WHERE id=2;
(주의) WHERE 조건을 빼먹으면 모든 값이 변경되어버림..!



13. SQL의 DELETE 구문
추천검색어: sql delete in mysql
mysql> DELETE FROM nameoftable WHERE id = 5
(주의) WHERE 조건을 빼먹으면 모든 값이 삭제되어버림..!



14. 데이터베이스
관계형 테이터베이스(Relational Database)



15. 관계형 데이터베이스의 필요성
중복 제거를 가능하게 함
데이터의 중복이 발생할 경우, 특히 중복되는 데이터의 용량이 클 경우 데이터 처리과정이 비효율적이게 됨
중복되는 부분을 또 하나의 테이블로 저장해서 중복을 없애면 효율을 높일 수 있음
관계형 데이터베이스는 join기능으로 분산된 테이블을 결합하여 한눈에 볼 수 있게해줌 　　　



16. 테이블 분리하기
테이블 분리
topic테이블 --(분리)--> topic테이블 + author테이블
테이블 이름 변경
mysql> RENAME TABLE topic TO topic_backup;



17. 관계형 데이터베이스의 꽃 JOIN
Join 기능

독립적으로 분리되어 저장된 테이블을 결합하여 하나의 테이블로 볼 수 있는 기능
mysql> SELECT * FROM topic LEFT JOIN author;
(주의) ON 조건을 빼먹으면 syntax 에러 발생
mysql> SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id;
topic의 author_id 와 author의 id 값이 같을 때
mysql> SELECT id,title,description,create,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
(주의) "ERROR 1052(23000): Column 'id' in field list is ambiguous"
두 테이블에 모두 id 칼럼이 있어서 어느 값을 기준으로할지 모호해서 에러 발생
mysql> SELECT topic.id,title,description,create,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
topic.id 로 어느테이블의 id칼럼인지 명시해서 해결
mysql> SELECT topic.id AS topic_id,title,description,create,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
결과물에 topic.id를 topic_id로 표현해줌 　　



18. 인터넷과 데이터베이스
인터넷

인터넷은 흩어져있는 컴퓨터가 연결되어 컴퓨터 간의 사회가 만들어지는 것
인터넷이 동작하기 위해서 최소 컴퓨터 2대 필요함
한대의 컴퓨터는 다른 컴퓨터에게 정보를 요청(client, 갑), 다른 컴퓨터는 요청한 정보를 응답해줌(server, 을)
Database Server

데이터베이스 서버에는 데이터가 저장되고, 데이터베이스 서버는 반드시 데이터베이스 클라이언트를 사용해야 함
MySQL을 설치하면 MySQL client와 MySQL server 두 개가 동시에 설치됨
지금까지 데이터베이스 서버를 직접 다룬 것처럼 느껴지지만 사실 우리가 사용했던 것은 데이터베이스 클라이언트 중 하나
MySQL Monitor
MySQL 서버에 접속할 수 있도록 기본적으로 번들로써 제공하는 클라이언트
명령어로 데이터베이스 서버를 제어하는 프로그램 　　　　　


MySQL은 내부적으로 인터넷을 활용할 수 있도록 고안된 시스템
전세계에 있는 수많은 데이터베이스 클라이언트들이 하나의 데이터베이스 서버를 통해서 서로 데이터를 주고받고 관리하는 것이 가능해짐
"수학에서 사물은 이해하는 것이 아니라, 그저 익숙해지는 것일 뿐이다" - 폰 노이만



19. MySQL 클라이언트
MySQL Monitor
명령어 기반 클라이언트
어디서든 실행할 수 있지만 명령어를 알아야 제어할 수 있다
MySQL Workbench
GUI 기반 클라이언트
명령어를 몰라도 클릭만으로 제어할 수 있다
추천검색어: mysql client 　　


출처: https://www.slant.co/topics/53/~best-mysql-client-applications-for-windows



20. MySQL Workbench
MySQL 에서 공식적으로 제공하는 클라이언트 중 하나

GUI 환경에서 엑셀을 다루듯 데이터베이스를 다룰 수 있음

./mysql -uroot -p -hlocalhost // -h 서버에 해당되는 컴퓨터, 쓰지 않으면 기본으로 localhost

작성한 쿼리문 실행 　　



스키마 생성 　　



현재 활성화되어있는 스키마에서 테이블 생성 　　



데이터 설정

PK: Primary Key
NN: Not Null
AI: Auto Increment 　


서버에 전송

Apply 버튼을 눌러 생성된 sql문을 MySQL 서버에 전송함으로서 데이터베이스 서버를 제어함



21. 용어 정리
색인(index) : 이미 뒤져놨기 때문에 빠르게 찾을 수 있다
모델링(modeling) : 어떻게하면 데이터의 중복없이 테이블의 효율적으로 설계할 것인가
백업(backup) : 하드디스크는 언제 고장날지 모르지만 반드시 고장난다
클라우드(cloud) : 아마존, 네이버 같은 큰 회사들이 운영하고 있는 인프라 위에 있는 컴퓨터를 임대하여 사용하는 것
	추천키워드: AWS RDS, Google Cloud SQL for MySQL, AZURE Database for MySQL
프로그래밍 : 프로그래밍 언어로 데이터베이스 서버에 sql을 던져줄 수 있는 방법만 알면 자신의 웹사이트에 데이터 분석과 같은 것을 수행할 수 있음
	추천키워드: Python mysql api, PHP mysql api, Java mysql api, ...
MySQL_기본 문법정리

 #1 
CREATE
데이터베이스 생성 및 사용하기

SHOW DATABASESE;
현재 서버에 어떤 데이터베이스가 있는지 확인합니다.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

CREATE DATABASES 데이터베이스_이름;
새로운 데이터 베이스를 생성할수 있습니다.

mysql> create databases testsql;
mysql> show databases;
위와 같이 명령어를 실행하면 아래와 같이 testsql이 생성 되었습니다.

+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| testsql            |
+--------------------+
5 rows in set (0.00 sec)

USE 데이터베이스_이름;
use는 사용할 데이터베이스를 지정합니다. 데이터베이스를 이용해 테이블을 만들거나 수정하거나 삭제 하는 등의 작업을 하려면 use명령어를 꼭 사용해야 합니다.

mysql> use testsql
Database changed

테이블 생성 및 조회하기
CREATE TABLE 테이블이름(정보);
USE 를 이용해 데이터베이스를 선택했다면 해당 데이터베이스의 테이블을 생성할수 있습니다.

mysql> create table user(
    -> id int(11) not null auto_increment,
    -> title varchar(100) not null,
    -> description text null,
    -> created datetime not null,
    -> author varchar(15) null,
    -> profile varchar(200) null,
    -> primary key(id)
    -> );
Query OK, 0 rows affected, 1 warning (0.01 sec)
id값을 설정할때 데이터 타입 넘버를 참고 하길 (무난하게 INT)
NOT NULL은 값이 없는것을 허용하지 않겠다란 뜻입니다.
AUTO_INCREMENT는 자동으로 1씩 증가하고 중복되지 않은 식별자를 갖게 됩니다.
VARCHAR(size)는 글자제한을 의미합니다.(255까지 가능)
데이터 타입을 참고하면서 작성하는 것을 권장합니다. 데이터타입참고


DESCRIBE 테이블이름;
만약 위에 생성된 테이블의 결과를 확인하고 싶으면 아래와 같이 입력하면 됩니다.

mysql> DESCRIBE user;
아래와 같이 위에 작성했던 테이블에 대한 정보가 나옵니다.

+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | int          | NO   | PRI | NULL    | auto_increment |
| title       | varchar(100) | NO   |     | NULL    |                |
| description | text         | YES  |     | NULL    |                |
| created     | datetime     | NO   |     | NULL    |                |
| author      | varchar(15)  | YES  |     | NULL    |                |
| profile     | varchar(200) | YES  |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
6 rows in set (0.01 sec)

테이블 내용 삽입하기 및 선택하기(조회)
INSERT INTO 테이블이름(field정보) VALUES(해당하는field내용)
INSERT INTO 테이블이름() VALUES()는 해당 테이블에 대한 정보를 입력할수 있습니다. 테이블 이름과 벨류의 문자열 순으로 정보가 나열 됩니다.

mysql> insert into user(title,description,created,author,profile) 
values('joy','coding',now(),'jangh','developer');
Query OK, 1 row affected (0.00 sec)

select * from 테이블이름;
위에 insert into로 입력한 정보를 선택해서 조회할수 있습니다. *은 전체를 조회할수 있습니다.

mysql> select * from user;
아래와 같이 위에 작성했던 테이블에 대한 정보가 나옵니다.

+----+-------+-------------+---------------------+--------+-----------+
| id | title | description | created             | author | profile   |
+----+-------+-------------+---------------------+--------+-----------+
|  1 | joy   | coding      | 2021-07-23 01:03:26 | jangh  | developer |
+----+-------+-------------+---------------------+--------+-----------+
1 row in set (0.00 sec)
번외 적으로 데이터를 하나 더 추가하고 싶으면 INSERT INTO를 다시 활용해서 작성하면 됩니다.

mysql> insert into user (title,description,created,author,profile) 
values('happy','coco',now(),'teemo','developer');
Query OK, 1 row affected (0.00 sec)
위와같이 정보를 추가하고 select * 을 사용해서 전체 정보를 선택합니다.

mysql> select * from user;
+----+-------+-------------+---------------------+--------+-----------+
| id | title | description | created             | author | profile   |
+----+-------+-------------+---------------------+--------+-----------+
|  1 | joy   | coding      | 2021-07-23 01:03:26 | jangh  | developer |
|  2 | happy | coco        | 2021-07-23 01:05:18 | teemo  | developer |
+----+-------+-------------+---------------------+--------+-----------+
2 rows in set (0.00 sec)
MySQL_기본 문법정리 #2 READ UPDATE DELETE
SELECT 기본 문법
SELECT * from 테이블이름
문법정리#1에 이어서 SELECT * 는 전체 정보를 선택해서 가져올수 있습니다.

mysql> select * from user;
+----+---------+-------------+---------------------+--------+-----------+
| id | title   | description | created             | author | profile   |
+----+---------+-------------+---------------------+--------+-----------+
|  1 | joy     | coding      | 2021-07-23 01:03:26 | jangh  | developer |
|  2 | happy   | coco        | 2021-07-23 01:05:18 | teemo  | developer |
|  3 | art     | cat         | 2021-07-23 01:46:20 | toto   | md        |
|  4 | love    | opa         | 2021-07-23 01:47:40 | puma   | teacher   |
|  5 | fashion | sexy        | 2021-07-23 01:49:15 | dior   | designer  |
+----+---------+-------------+---------------------+--------+-----------+
5 rows in set (0.00 sec)

SELECT (원하는 Field) from 테이블이름
SELECT에서 원하는 값만 정보를 불러올수 있습니다. 예를들어 description과 profile을 제외한 field를 가져오려면 아래와 같습니다.

mysql> select id,title,created,author from user;
+----+---------+---------------------+--------+
| id | title   | created             | author |
+----+---------+---------------------+--------+
|  1 | joy     | 2021-07-23 01:03:26 | jangh  |
|  2 | happy   | 2021-07-23 01:05:18 | teemo  |
|  3 | art     | 2021-07-23 01:46:20 | toto   |
|  4 | love    | 2021-07-23 01:47:40 | puma   |
|  5 | fashion | 2021-07-23 01:49:15 | dior   |
+----+---------+---------------------+--------+
5 rows in set (0.00 sec)

SELECT (원하는 Field) from 테이블이름 WHERE FIELD='해당정보'
추가적으로 WHERE옆에 field = '해당정보'를 입력하면 해당정보에 대한 세부적인 내용을 출력할수 있습니다. 예를들어 field는 title이고 title에서 'happy'라는 정보를 출력하고 싶을떄 아래와 같습니다.

mysql> select id,title,created,author from user where title='happy';
+----+-------+---------------------+--------+
| id | title | created             | author |
+----+-------+---------------------+--------+
|  2 | happy | 2021-07-23 01:05:18 | teemo  |
+----+-------+---------------------+--------+
1 row in set (0.00 sec)

SELECT (원하는 Field) from 테이블이름 ORDER BY 기준(숫자,아이디) DESC;
OREDER BY id DESC;는 id값을 기준으로 정렬순서를 역전시킬수 있습니다(내림차순)

mysql> select id,title,created,author from user order by id desc;
+----+---------+---------------------+--------+
| id | title   | created             | author |
+----+---------+---------------------+--------+
|  5 | fashion | 2021-07-23 01:49:15 | dior   |
|  4 | love    | 2021-07-23 01:47:40 | puma   |
|  3 | art     | 2021-07-23 01:46:20 | toto   |
|  2 | happy   | 2021-07-23 01:05:18 | teemo  |
|  1 | joy     | 2021-07-23 01:03:26 | jangh  |
+----+---------+---------------------+--------+
5 rows in set (0.00 sec)
만약에 여기서 내림차순 기준으로 3개의 데이터만 볼수있게 제한을 걸고 싶으면 옆에 LIMIT 3;을 입력하면 됩니다. (광범위한 데이터를 제한 걸어서 효율적으로 관리할수 있습니다.)

mysql> select id,title,created,author from user order by id desc limit 3;
+----+---------+---------------------+--------+
| id | title   | created             | author |
+----+---------+---------------------+--------+
|  5 | fashion | 2021-07-23 01:49:15 | dior   |
|  4 | love    | 2021-07-23 01:47:40 | puma   |
|  3 | art     | 2021-07-23 01:46:20 | toto   |
+----+---------+---------------------+--------+
3 rows in set (0.00 sec)

UPDATE 테이블 SET (원하는 Field) WHERE (아이디값)
UPDATE를 통해 해당 아이디에 있는 Field값을 수정할수 있습니다. 주의할점은 where문을 꼭!! 기입하기

mysql> update user set title='mysql',author='kakao' where id=2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from user;
+----+---------+-------------+---------------------+--------+-----------+
| id | title   | description | created             | author | profile   |
+----+---------+-------------+---------------------+--------+-----------+
|  1 | joy     | coding      | 2021-07-23 01:03:26 | jangh  | developer |
|  2 | mysql   | coco        | 2021-07-23 01:05:18 | kakao  | developer |
|  3 | art     | cat         | 2021-07-23 01:46:20 | toto   | md        |
|  4 | love    | opa         | 2021-07-23 01:47:40 | puma   | teacher   |
|  5 | fashion | sexy        | 2021-07-23 01:49:15 | dior   | designer  |
+----+---------+-------------+---------------------+--------+-----------+
5 rows in set (0.00 sec)

DELETE from 테이블 WHERE (삭제하고싶은값)
delete는 from ... where 은 원치않은 값을 삭제할수 있습니다. 만약 위에 있는 테이블에서 id값이 3인 정보를 삭제하고 싶으면 아래와 같습니다.

mysql> delete from user where id=3;
Query OK, 1 row affected (0.00 sec)

mysql> select * from user;
+----+---------+-------------+---------------------+--------+-----------+
| id | title   | description | created             | author | profile   |
+----+---------+-------------+---------------------+--------+-----------+
|  1 | joy     | coding      | 2021-07-23 01:03:26 | jangh  | developer |
|  2 | mysql   | coco        | 2021-07-23 01:05:18 | kakao  | developer |
|  4 | love    | opa         | 2021-07-23 01:47:40 | puma   | teacher   |
|  5 | fashion | sexy        | 2021-07-23 01:49:15 | dior   | designer  |
+----+---------+-------------+---------------------+--------+-----------+
4 rows in set (0.00 sec)
MySQL_ JOIN
JOIN
조인은 관계형 데이터 베이스에서 자주 쓰이면서 중요한 쿼리문중 하나입니다. 즉 각각의 테이블을 JOIN을 통해서 관계를 가질수 있게 합니다.


INNER JOIN ON
아래는 INNER JOIN의 기본 구조입니다.

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;
table1과 table2를 합친다란 뜻입니다. 중요한 부분은 ON입니다. ON은 관계의 기준을 말합니다. 즉 table1의 컬럼이름과 table2의 컬럼이름을 기준으로 관계를 형성하고 합친다 라는 뜻으로 이해하면 됩니다.

